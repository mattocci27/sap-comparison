---
title: "a', b', a* and b* for *Hevea brasiliensis*"
author: "Masatoshi Katabuchi"
date: "`r format(Sys.time(), '%B %d, %Y')`"
# fontsize: 11pt
crossref:
  fig-title: Fig.
  fig-prefix: Fig.
format:
  html:
    theme: spacelab #readable #sandstone #spacelab #flatly
    toc: true
    toc-depth: 2
    toc-title: Contents
    embed-resources: true
    # self_contained: true
    smooth-scroll: true
    highlight-style: github
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  warning = FALSE,
  cache = FALSE,
  echo = FALSE,
  fig.align = "center",
  fig.show = "hold",
  root.dir = rprojroot::find_root('_targets.R')
)
```

```{r}
library(targets)
library(tidyverse)
```

```{r}
d <- read_csv(here::here("data/fd_k_traits.csv")) |>
  filter(!is.na(wood_density)) |>
  filter(!is.na(swc)) |>
  filter(!is.na(dh)) |>
  filter(!is.na(vaf)) |>
  filter(!is.na(vf)) |>
  filter(!is.na(ks)) |>
  filter(is.na(removed_k))

d_sp <- d |>
  group_by(species) |>
  summarize(
    wood_density = mean(wood_density),
    log_swc = mean(log(swc)),
    log_dh = mean(log(dh)),
    log_vaf = mean(log(vaf)),
    log_vf = mean(log(vf)),
    log_ks = mean(log(ks))
  )

log_ks_s <- d_sp |> pull(log_ks) |> scale()
log_ks_s <- log_ks_s[15]
log_ks_mean <- d_sp |> pull(log_ks) |> mean()
log_ks_sd <- d_sp |> pull(log_ks) |> sd()

log_vaf_s <- d_sp |> pull(log_vaf) |> scale()
log_vaf_s <- log_vaf_s[15]
log_vaf_mean <- d_sp |> pull(log_vaf) |> mean()
log_vaf_sd <- d_sp |> pull(log_vaf) |> sd()


d_rub <- d |>
  filter(species == "Hevea brasiliensis")
mean_ks <- mean(d_rub$ks)
mean_vaf <- mean(d_rub$vaf, na.rm = TRUE)
```

I used *Hevea brasiliensis*'s mean values:
mean Ks: `r mean_ks |> round(3)`, mean VAF: `r mean_vaf |> round(3)`.
Note that there are intraspecific variatons for these values in reality.


## Ks, segment-level

```{r}
summary_ks_seg <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_segments_noxylem_traits_log_ks))
draws_ks_seg <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_segments_noxylem_traits_log_ks)) |>
    janitor::clean_names()
```

```{r}
extract_seg_coef <- function(fit_summary, trait_df, trait) {
  t_s <- trait_df |> pull({{trait}}) |> scale()
  t_mean <- trait_df |> pull({{trait}}) |> mean()
  t_sd <- trait_df |> pull({{trait}}) |> sd()
  a_int <- fit_summary |>
    filter(variable == "beta_a[1,1]") |>
    pull(q50)
  a_power <- fit_summary |>
    filter(variable == "beta_a[2,1]") |>
    pull(q50)
  b_int <- fit_summary |>
    filter(variable == "beta_b[1,1]") |>
    pull(q50)
  b_slope <- fit_summary |>
    filter(variable == "beta_b[2,1]") |>
    pull(q50)

  a_int_re <- a_int - a_power * t_mean / t_sd
  a_power_re <- a_power / t_sd
  b_int_re <- b_int - b_slope * t_mean / t_sd
  b_slope_re <- b_slope / t_sd
  list(
    a_int_re = a_int_re |> exp() |> round(2),
    a_power_re = a_power_re |> round(3),
    b_int_re = b_int_re |> round(3),
    b_slope_re = b_slope_re |> round(3))
}

ks_seg_coef <- extract_seg_coef(summary_ks_seg, d_sp, log_ks)
```

Regression coefficients are posterior medians.
$$
a' = `r ks_seg_coef$a_int_re` \times K_s^{`r ks_seg_coef$a_power_re`}
$$
$$
b' = `r ks_seg_coef$b_int_re` + `r ks_seg_coef$b_slope_re` \times \text{ln} K_s
$$

95% CI of a from estimated Ks (segment-level):
```{r}
m <- draws_ks_seg |>
  dplyr::select(c(beta_a_1_1, beta_a_2_1)) |>
  as.matrix()
log_a <- m %*% c(1, log_ks_s)
exp(log_a) |> quantile(c(0.025, 0.5, 0.975))
```

95% CI of b from estimated Ks (segment-level):
```{r}
m <- draws_ks_seg |>
  dplyr::select(c(beta_b_1_1, beta_b_2_1)) |>
  as.matrix()
b <- m %*% c(1, log_ks_s)
b |> quantile(c(0.025, 0.5, 0.975))
```

## Ks, species-level
```{r}
summary_ks_sp <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit3_summary_segments_noxylem_traits_sp_log_ks))
draws_ks_sp <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit3_draws_segments_noxylem_traits_sp_log_ks)) |>
    janitor::clean_names()
```

```{r}
extract_sp_coef <- function(fit_summary, trait_df, trait) {
  t_s <- trait_df |> pull({{trait}}) |> scale()
  t_mean <- trait_df |> pull({{trait}}) |> mean()
  t_sd <- trait_df |> pull({{trait}}) |> sd()
  a_int <- fit_summary |>
    filter(variable == "beta_a[1]") |>
    pull(q50)
  a_power <- fit_summary |>
    filter(variable == "beta_a[2]") |>
    pull(q50)
  b_int <- fit_summary |>
    filter(variable == "beta_b[1]") |>
    pull(q50)
  b_slope <- fit_summary |>
    filter(variable == "beta_b[2]") |>
    pull(q50)
  a_int_re <- a_int - a_power * t_mean / t_sd
  a_power_re <- a_power / t_sd
  b_int_re <- b_int - b_slope * t_mean / t_sd
  b_slope_re <- b_slope / t_sd
  list(
    a_int_re = a_int_re |> exp() |> round(2),
    a_power_re = a_power_re |> round(3),
    b_int_re = b_int_re |> round(3),
    b_slope_re = b_slope_re |> round(3))
}

ks_sp_coef <- extract_sp_coef(summary_ks_sp, d_sp, log_ks)
```

$$
a' = `r ks_sp_coef$a_int_re` \times K_s^{`r ks_sp_coef$a_power_re`}
$$
$$
b' = `r ks_sp_coef$b_int_re` + `r ks_sp_coef$b_slope_re` \times \text{ln} K_s
$$

95% CI of a from estimated Ks (species-level):
```{r}
m <- draws_ks_sp |>
  dplyr::select(c(beta_a_1, beta_a_2)) |>
  as.matrix()
log_a <- m %*% c(1, log_ks_s)
exp(log_a) |> quantile(c(0.025, 0.5, 0.975))
```

95% CI of b from estimated Ks (species-level):
```{r}
m <- draws_ks_sp |>
  dplyr::select(c(beta_b_1, beta_b_2)) |>
  as.matrix()
b <- m %*% c(1, log_ks_s)
b |> quantile(c(0.025, 0.5, 0.975))
```

## VAF, segment-level

```{r}
summary_vaf_seg <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_segments_noxylem_traits_log_vaf))
draws_vaf_seg <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_draws_segments_noxylem_traits_log_vaf)) |>
    janitor::clean_names()
vaf_seg_coef <- extract_seg_coef(summary_vaf_seg, d_sp, log_vaf)
```

$$
a' = `r vaf_seg_coef$a_int_re` \times VAF^{`r vaf_seg_coef$a_power_re`}
$$
$$
b' = `r vaf_seg_coef$b_int_re` + `r vaf_seg_coef$b_slope_re` \times \text{lnVAF}
$$

95% CI of a from estimated VAF (segment-level):
```{r}
m <- draws_vaf_seg |>
  dplyr::select(c(beta_a_1_1, beta_a_2_1)) |>
  as.matrix()
log_a <- m %*% c(1, log_vaf_s)
exp(log_a) |> quantile(c(0.025, 0.5, 0.975))
```

95% CI of b from estimated vaf (segment-level):
```{r}
m <- draws_vaf_seg |>
  dplyr::select(c(beta_b_1_1, beta_b_2_1)) |>
  as.matrix()
b <- m %*% c(1, log_vaf_s)
b |> quantile(c(0.025, 0.5, 0.975))
```

## VAF, species-level
```{r}
summary_vaf_sp <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit3_summary_segments_noxylem_traits_sp_log_vaf))
draws_vaf_sp <- withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit3_draws_segments_noxylem_traits_sp_log_vaf)) |>
    janitor::clean_names()
vaf_sp_coef <- extract_sp_coef(summary_vaf_sp, d_sp, log_vaf)
```

$$
a' = `r vaf_sp_coef$a_int_re` \times VAF^{`r vaf_sp_coef$a_power_re`}
$$
$$
b' = `r vaf_sp_coef$b_int_re` + `r vaf_sp_coef$b_slope_re` \times \text{lnVAF}
$$

95% CI of a from estimated VAF (species-level):
```{r}
m <- draws_vaf_sp |>
  dplyr::select(c(beta_a_1, beta_a_2)) |>
  as.matrix()
log_a <- m %*% c(1, log_vaf_s)
exp(log_a) |> quantile(c(0.025, 0.5, 0.975))
```

95% CI of b from estimated VAF (species-level):
```{r}
m <- draws_vaf_sp |>
  dplyr::select(c(beta_b_1, beta_b_2)) |>
  as.matrix()
b <- m %*% c(1, log_vaf_s)
b |> quantile(c(0.025, 0.5, 0.975))
```


# Model4 for *Hevea brasiliensis* with varying *Pg*

a\*

- q2_5: lower 2.5% CI
- q50: median
- q97_5: upper 97.5% CI

```{r}
withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_segments_xylem_combined)) |>
  filter(str_detect(variable, "log_a$")) |>
  dplyr::select(pg = max_pg, q2_5, q50, q97_5) |>
  mutate(across(where(is.numeric), \(x) exp(x))) |>
  mutate(pg = as.numeric(pg)) |>
  arrange(pg) |>
  kable()
```

b\*

```{r}
withr::with_dir(rprojroot::find_root('_targets.R'),
    targets::tar_read(fit_summary_segments_xylem_combined)) |>
  filter(str_detect(variable, "b$")) |>
  dplyr::select(pg = max_pg, q2_5, q50, q97_5) |>
  # mutate(across(where(is.numeric), \(x) exp(x))) |>
  mutate(pg = as.numeric(pg)) |>
  arrange(pg) |>
  kable()
```

**Note**:

The orignial regression model uses the scaled predictor:
$$
y = \beta_0 + \beta_1 \times x_s
$$

where $x_s$ is defined as:

$$
x_s = \frac{x - \bar{x}}{\sigma}.
$$

Here, $\bar{x}$ is the mean of $x$, and $\sigma$ is the standard deviaion of $x$.


The regression model with the original predictor is:

$$
y = \beta_0^{*} + \beta_1^{*} \times x
$$

where:

$$
\begin{align}
\beta_0^{*} &= \beta_0 - \beta_1 \times \frac{\bar{x}}{\sigma} \\
\beta_1^{*} &= \frac{\beta_1}{\sigma}.
\end{align}
$$


```{r}
knitr::knit_exit()
```

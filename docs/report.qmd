---
title: "Figures"
author: "Masatoshi Katabuchi"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 11pt
format:
  html:
    theme: spacelab #readable #sandstone #spacelab #flatly
    toc: true
    toc-depth: 2
    toc-title: Contents
    self-contained: true
    smooth-scroll: true
    highlight-style: github
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

```{r,include=FALSE}
library(tidyverse)
library(tarchetypes)
library(here)
library(kableExtra)
library(targets)
library(loo)
library(smatr)
source(here("R", "stan.R"))
anova_yml <- yaml::yaml.load_file(here("yml/anova.yml"))
```

# Fig. 1

## Summary

- **Pressure > tension?**
Pressure induced flow rates tend to be greater than tension induced flow rates (positive $\mu$ = `ks_ratio`; the equation and the barplot for means).
Although it's not signifcant, the difference looks kinda clear from Fig. 1ab and the hierarchical model.

- **There are species effects.**
Species effects on the difference (ratio) between pressure and tension are relatively large (`r str_split(anova_yml$species, " ")[[1]][1]` of the total variance) but pressure-level effects are small (`r str_split(anova_yml$pressure, " ")[[1]][1]` of the total variance) .


## Visualization

(a): **Note that this standard major axis (SMA) regression is not that appropriate** because the data points include both interspecific and intraspecific variations, and thus residuals should not be independent.

Having said that, both elevation and slope shifted significantly (table below and Fig. 1a), suggesting that flow rates tend to be greater for pressure calibration.
Visualization itself is probably fine.
The thick line indicates SMA regression and shaded area indicates 95% confidence intervals.


(b): Each data point indicates each raw measurement (each tree has 3 measurements).
**This is just visualization but I think it's more useful and intuitive than just showing model estimates.**
**Analysis for this data is in the next section.**

It looks:

- Pressure > tension for HH and VM
- Pressure < tension for AP.

The effect of pressure-level is not clear.

We can check the patterns in more detail using hierarchical models below.

![](`r here::here("figs/sma_ks.png")`)


```{r, include=FALSE}
tar_load(ks_spp_err_csv)
d <- read_csv(ks_spp_err_csv)
sma_fit <- sma(log10(tens_calib_mean) ~ log10(pres_calib_mean), d)
```

```{r}
sma_fit
```


## Analysis (ANOVA-like hierarchical model)

We can make the hierarchical model like the previous model, but we can include measurment errors from the raw data too.
We don't want to waste the data!

$$
y^{meas}_{1ijk} \sim N(y_{1ijk}, \sigma_{y1ijk})
$$

$$
y^{meas}_{2ijk} \sim N(y_{2ijk}, \sigma_{y2ijk})
$$

$$
\alpha_j \sim N(0, \sigma_{\alpha})
$$
$$
\beta_j \sim N(0, \sigma_{\beta})
$$

$$
\mathrm{ln}\; y_{1ijk} \sim N(\mu + \alpha_j + \beta_k + \mathrm{ln}\; y_{2ijk}, \sigma)
$$

- *i*: Obervation

- *j*: Species

- *k*: Pressure level

- $y^{meas}_{1ijk}$: Measured mean pressure induced flow rates for *i*th obervation from *j*th species, under *k*th pressure level (data).
$y^{meas}_{2ijk}$ is for tension calibration.

- $y_{1ijk}$: True pressure indicuded flow rates for *i*th obervation from *j*th species, under *k*th pressure level (parameter).
$y_{2ijk}$ is for tension calibration.

- $\sigma_{y1jk}$: Standard deviation of pressure induced flow rates for *i*th obervation from *j*th species, under *k*th pressure level (data).
This data can be estimated from the raw data with multiple measurements.
$\sigma_{y2jk}$ is for tension calibration.

- $\mu$: Overall (species and pressure-level independet) effects.

- $\alpha_j$: Species effect

- $\beta_k$: Pressure-leve effect

- $\sigma_{\alpha}$: Standard deviaiton of the species effect

- $\sigma_{\beta}$: Standard deviaiton of the pressure-level effect

- $\sigma$: Standard deviaiton of the model (i.e., residuals)


I will show several figures from this single analysis.

### Variance

Posterior medians, 50%, and 95% credible intervals (CIs) for standard deviations estiamted from the difference between pressure and tension induced flows.

![](`r here::here("figs/coef_intervals_sd.png")`){ width=350 }

Posterior medians, and 50% CIs for standard deviations estiamted from the difference between pressure and tension induced flows.
The data to draw the figure is the same with the above, but you can clearly see the distribution of the true estimates.
Upper bounds of these estimates (especially pressure) tend to become very large due to the small group number (3-levels: 0.02, 0.05, and 0.08 MPa).
Using 50% CI instead of 95% CI might be OK but I'm not very sure.
Half of the shaded area (50% CI) should contain the true values.

![](`r here::here("figs/coef_density_sd.png")`){ width=350 }

We can translate the posterior distribution of standard deviations into an ANOVA like statement.

For example, we can calculate the species effect like:

$$
\frac{\sigma^2_{\alpha}}{\sigma^2_{\alpha} + \sigma^2_{\beta} + \sigma^2} \times 100\;(\%)
$$

**Species account for `r str_split(anova_yml$species, " ")[[1]][1]` of total variance for the ratio between pressure and tension induced flow rates, whereas pressure levels account for only `r str_split(anova_yml$pressure, " ")[[1]][1]` of the total variance.**
**Although pressure levels do not affect the differences in the two estimates, species effects are important.**
The effect of interactions was not selected after model selections.

- median and 50% CIs

- Species: `r anova_yml$species`

- Pressure: `r anova_yml$pressure`

- Residuals: `r anova_yml$residuals`

### Mean

Posterior medians, 50%, and 95% credible intervals (CIs) for species and pressure effects on the ratio between pressure and tension induced flows.
Positive values indicate pressure induced flow rates are greater than tension induced flow rates.

Pressure induced flow rates tend to be greater than tension induced flow rates (positive ks_ratio parameter).
This suggests a probablity of getting larger values for pressure induced flow rates than for tension induced flow rates is about 90% (but less than 95%).
This is consistent with Fig. 1ab.

![](`r here::here("figs/coef_intervals_mean.png")`){ width=350 }

Here is a multiple comparison-like visualization.
The estimates for AP is smaller than HH, TG, and VM, suggesting that the difference between pressure and tension induced flow rates tends to be smaller for AP compared to HH, TG, and VM given that the overall effects is positive,
HB shows the similar pattern with AP.
This is also consistent with Fig. 1b.

![](`r here::here("figs/coef_intervals_diff.png")`){ width=350 }


# Fig. 2

## Check the raw data

```{r,eval=TRUE}
tar_load(cond_count_csv)
d <- read_csv(cond_count_csv)

ggplot(d, aes(x = as.factor(pressure), y = count/total * 100)) +
  geom_boxplot() +
  facet_wrap(~species)

ggplot(d, aes(x = pressure, y = count/total * 100)) +
  geom_point(aes(size = total), alpha = 0.6) +
#  scale_x_log10() +
#  geom_smooth(method = "lm") +
  facet_wrap(~species)
```

## For main text

We modeled the probability of a vessel filled with silicon as linear and quadratic logistic functions of perfusion pressures with varying- intercepts and slopes by species (Supporting information X).
Model selection using Pareto-smoothed importance sampling leave-one-out cross-validation (PSIS-LOO; @Vehtari2014; @Vehtari2017) suggested that the quadratic model performed better (the difference in expected log pointwise predictive accuracies between the two models was 207.9), and thus we only report the result of the quadratic model.

**Legend:**
Changes in proportion of silicon-stained vessels along perfusion pressures.
Lines and shaded areas indicate the posterior medians and 95% credible intervals, respectively.
Size of data points (in blue) is proportional to the total number of vessels.

![](`r here::here("figs/count_pressure_quadratic.png")`){ width=200 }

## For supporting information

**Legend:**
Posterior medians, 50%, and 95% credible intervals (CIs) for model coefficients of the effects of perfusion pressure on the probability of a vessel filled with silicon.
All, Common effects across all the species;
HH, *Hopea hongayensis*;
VM, *Vatica mangachapoi*;
HB, *Hevea brasiliensis*;
TG, *Tectona grandis*;
AP, *Acacia pennata*.

![](`r here::here("figs/coef_intervals_logistic.png")`){ width=450 }

### Stan code

```{stan, file=here::here('stan/hierarchical_logistic.stan'), echo=TRUE, eval=FALSE, output.var="hoge"}
```

```{r,eval=FALSE}
# library(loo)
# tar_load(quad_logistic_mcmc_hierarchical_logistic)
# tar_load(simple_logistic_mcmc_hierarchical_logistic)
# loo(quad_logistic_mcmc_hierarchical_logistic)

# loo1 <- simple_logistic_mcmc_hierarchical_logistic$loo()
# loo2 <- quad_logistic_mcmc_hierarchical_logistic$loo()
# loo_compare(loo1, loo2)
```

# Fig. 3

This is something different from balanced/unbalanced data, I need to check if that kind of analysis works fine first.

```{r}
library(tidyverse)

d <- read_csv("data-raw/calibration_raw_data.csv") |>
  janitor::clean_names()

d2 <- d |>
  filter(species_name == "Hevea brasiliensis")

hist(d$p_2)

ggplot(d, aes(x = k, y = fd, col = xylem_type)) +
  geom_point() +
  facet_wrap(~ species_name, scale = "free")

p1 <-
  d2 |> filter(p_2 <= 0.02) |>
  ggplot(aes(x = k, y = fd, col = xylem_type)) +
  geom_point() +
  facet_wrap(~ species_name, scale = "free") +
  ggtitle("P <= 0.02")

p2 <- d2 |> filter(p_2 <= 0.05) |>
  ggplot(aes(x = k, y = fd, col = xylem_type)) +
  geom_point() +
  facet_wrap(~ species_name, scale = "free") +
  ggtitle("P <= 0.05")


```

```{r}

n <- 10
p_raw <- seq(0.03, 0.08, by = 0.01)
x_raw <- seq(0, 1, length = n)

data_raw <- tibble(p = rep(p_raw, each = n), x = rep(x_raw, length(p_raw)))

nd <- data_raw |>
  group_by(p) |>
  nest() |>
  ungroup()

filter_cum <- function(nd, p_val) {
  nd |>
    filter(p <= {{p_val}})  |>
    mutate(p_cum = {{p_val}}) |>
    unnest(cols = data)
}

data <- bind_rows(
  filter_cum(nd, 0.03),
  filter_cum(nd, 0.04),
  filter_cum(nd, 0.05),
  filter_cum(nd, 0.06),
  filter_cum(nd, 0.07),
  filter_cum(nd, 0.08)
)

a <- 119 + 50 * p_raw
b <- 1.231 + 2 * p_raw

data2 <- data |>
  group_by(p_cum) |>
  nest() |>
  ungroup() |>
  mutate(a = a) |>
  mutate(b = b) |>
  unnest(cols = data) |>
  mutate(log_mu = log(a) + b * x)

sig <- 0.2

log_y <- rnorm(nrow(data2), data2$log_mu, sig)

data3 <- data2 |>
  mutate(log_y = log_y) |>
  mutate(y = exp(log_y)) |>
  mutate(p_cum2 = as.factor(p_cum))

ggplot(data3, aes(x = x, y = y, col = as.factor(p_cum))) +
  geom_point() +
  geom_smooth(se = FALSE)

ggplot(data3, aes(x = x, y = y, col = as.factor(p_cum))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_wrap(~ p_cum2)


p <- rep(p_raw, each = n)

sig <- 0.01
mu <- alpha + beta * p
y <- rnorm(n * length(p_raw), mu, sig)

tibble(y, mu, p) +
  ggplot(aes(x = ))

```


```{r,eval=FALSE, include=FALSE}
library(lme4)
fit <- glmer(cbind(count, total - count) ~ pressure + (pressure | species),
  family = binomial, data = d)
```

```{r,eval=FALSE, include=FALSE}

library(bayesplot)

tar_load(quad_logistic_summary_hierarchical_logistic)
tar_load(quad_logistic_draws_hierarchical_logistic)
quad_logistic_summary_hierarchical_logistic |>
  filter(str_detect(variable, "gamma|beta"))


mcmc_intervals(quad_logistic_draws_hierarchical_logistic, regex_pars = "gamma\\[|beta\\[")

mcmc_intervals(quad_logistic_draws_hierarchical_logistic, regex_pars = "beta\\[")

tar_load(cond_count_csv)
d <- read_csv(cond_count_csv)
sp <- as.factor(d$species) |> unique() |> sort() |> as.character()

intervals_data <- mcmc_intervals_data(
  quad_logistic_draws_hierarchical_logistic,
  regex_pars = "beta\\[|gamma\\[",
  prob = 0.5,
  prob_outer = 0.95) |>
  mutate(para = case_when(
    str_detect(parameter, "\\[1") ~ "Intercept",
    str_detect(parameter, "\\[2") ~ "Linear",
    str_detect(parameter, "\\[3") ~ "Quadratic",
  )) |>
  mutate(sp = case_when(
    str_detect(parameter, "gamma") ~ "All",
    str_detect(parameter, "1\\]") ~ sp[1],
    str_detect(parameter, "2\\]") ~ sp[2],
    str_detect(parameter, "3\\]") ~ sp[3],
    str_detect(parameter, "4\\]") ~ sp[4],
    str_detect(parameter, "5\\]") ~ sp[5],
  )) |>
  # mutate(para = str_c(sp, "-", para0)) |>
  mutate(para = factor(para,
    levels = c("Intercept", "Linear", "Quadratic") |> rev()))

  ggplot(intervals_data, aes(y = para)) +
    geom_vline(xintercept = 0, lty = 2, col = "grey60") +
    geom_linerange(aes(xmin = ll, xmax = hh)) +
    geom_linerange(aes(xmin = l, xmax = h), size = 2) +
    geom_point(aes(x = m), size = 3) +
    facet_wrap(~sp) +
    ylab("") +
    xlab("Posterior estimates") +
    my_theme()

```

```{r,eval=FALSE, include=FALSE}
tar_load(logistic_stan_data)
logistic_stan_data

tar_load(quad_logistic_diagnostics_hierarchical_logistic)
tar_load(quad_logistic_mcmc_hierarchical_logistic)
tar_load(quad_logistic_summary_hierarchical_logistic)
tar_load(quad_logistic_draws_hierarchical_logistic)
tar_load(simple_logistic_summary_hierarchical_logistic)
tar_load(simple_logistic_draws_hierarchical_logistic)
tar_load(simple_logistic_mcmc_hierarchical_logistic)

simple_logistic_mcmc_hierarchical_logistic$loo()
quad_logistic_mcmc_hierarchical_logistic$loo()
quad_logistic_diagnostics_hierarchical_logistic

quad_logistic_summary_hierarchical_logistic |>
  filter(str_detect(variable, "gamma|beta"))

library(bayesplot)

mcmc_intervals(quad_logistic_draws_hierarchical_logistic, regex_pars = "gamma\\[")

hist(rnorm(100))
library(loo)


d <- read_csv("data/cond_count.csv") |>
   filter(!is.na(count))

x_mean <- mean(d$pressure)
x_sd <- sd(d$pressure)

draws <- quad_logistic_draws_hierarchical_logistic

gamma_ <- draws |>
  janitor::clean_names() |>
  dplyr::select(contains("gamma")) |>
  as.matrix()

beta_ <- draws |>
  janitor::clean_names() |>
  dplyr::select(contains("beta"))

tmp <- list()
for (i in 1:5) {
  tmp[[i]] <- beta_ |>
  dplyr::select(matches(str_c("_", i, "$"))) |>
  as.matrix()
}

xx_raw <- seq(0.02, 0.08, length = 80)
xx <- (xx_raw - x_mean) / x_sd
xx_mat <- cbind(1, xx, xx^2)

sp <- d$species |> unique() |> as.factor() |> sort()
tmp2 <- tibble(data = map(tmp, \(x) x %*% t(xx_mat))) |>
  mutate(pred_m = map(data, \(x)apply(x, 2, quantile, 0.5))) |>
  mutate(pred_l = map(data, \(x)apply(x, 2, quantile, 0.25))) |>
  mutate(pred_h = map(data, \(x)apply(x, 2, quantile, 0.75))) |>
  mutate(pred_ll = map(data, \(x)apply(x, 2, quantile, 0.025))) |>
  mutate(pred_hh = map(data, \(x)apply(x, 2, quantile, 0.975))) |>
  dplyr::select(-data) |>
  mutate(species = sp) |>
  # mutate(xx = list(xx)) |>
  unnest(cols = c(pred_m, pred_l, pred_h, pred_ll, pred_hh))

logit <- function(z) {
  1 / (1 + exp(-z)) * 100
}

fig_data <- tmp2 |>
  mutate_if(is.numeric, logit) |>
  mutate(xx = rep(xx_raw, 5))

ggplot(fig_data) +
  geom_point(data = d, aes(x = pressure, y = count/total * 100, size = total), alpha = 0.05) +
  geom_line(aes(x = xx, y = pred_m)) +
  geom_ribbon(aes(x = xx, ymin = pred_l, ymax = pred_h), alpha = 0.4) +
  geom_ribbon(aes(x = xx, ymin = pred_ll, ymax = pred_hh), alpha = 0.4) +
  # facet_wrap(~sp) +
  facet_grid(rows = vars(species), scale = "free") +
  my_theme()


  ggplot(d, aes(x = pressure, y = count/total * 100)) +
  geom_point(aes(size = total), alpha = 0.6) +
#  scale_x_log10() +
#  geom_smooth(method = "lm") +
  facet_wrap(~species)


tmp3 <- logit(tmp2)
as_tibble(tmp3)


tmp %*% t(xx_mat)



xx_raw <- seq(0.02, 0.08, length = 80)
xx <- (xx_raw - x_mean) / x_sd

xx_mat <- cbind(1, xx, xx^2)
pred <- gamma_ %*% t(xx_mat)

pred <- beta_ %*% t(xx_mat_beta)




pred_m <- apply(pred, 2, quantile, 0.5) |> logit()
pred_l <- apply(pred, 2, quantile, 0.25) |> logit()
pred_ll <- apply(pred, 2, quantile, 0.025) |> logit()
pred_h <- apply(pred, 2, quantile, 0.75) |> logit()
pred_hh <- apply(pred, 2, quantile, 0.975) |> logit()

fig_data <- tibble(xx, pred_m, pred_ll, pred_l ,pred_h, pred_h)




ggplot(fig_data) +
  geom_line(aes(x = xx, y = pred_m)) +
  geom_ribbon(aes(x = xx, ymin = pred_l, ymax = pred_h), alpha = 0.4) +
  geom_ribbon(aes(x = xx, ymin = pred_ll, ymax = pred_hh), alpha = 0.4)


plot(xx_raw, logit(pred_h), type = "l")


logistic_summary_quad_logistic |>
  filter(str_detect(variable, "gamma"))
logistic_summary_quad_logistic |>
  filter(str_detect(variable, "beta"))

quad_logistic_summary_quad_logistic |>
  filter(str_detect(variable, "gamma"))

quad_logistic_summary_quad_logistic |>
  filter(str_detect(variable, "beta"))

logistic_summary_piecewise_logistic |>
  filter(str_detect(variable, "gamma"))

logistic_summary_piecewise_logistic |>
  filter(str_detect(variable, "beta"))

logistic_summary_piecewise_logistic |>
  filter(str_detect(variable, "beta\\[2"))

library(bayesplot)

mcmc_intervals(logistic_draws_piecewise_logistic, regex_pars = "beta\\[")
hist(rnorm(100))

c(1:4) %*% t(rep(1,5))
```


```{r, eval=FALSE}
targets::tar_visnetwork()
```


```{r, eval=FALSE}
devtools::session_info()
```

